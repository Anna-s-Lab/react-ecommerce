import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";

/*This code is implementing a Redux slice for managing authentication state using Redux Toolkit,
 a library that simplifies writing Redux logic.  */

const initialState = {
  isAuthenticated: false, // Tracks whether a user is authenticated (default is false).
  isLoading: false, // Tracks whether an authentication process (e.g., login) is in progress (default is false).
  user: null, // Holds information about the authenticated user (default is null).
};

export const register = createAsyncThunk("/auth/register", async (formData) => {
  console.log("Entra en el thunk");
  const response = await axios.post(
    "http://localhost:5000/api/auth/register",
    formData,
    {
      withCredentials: true,
    }
  );

  return response.data;
});

export const login = createAsyncThunk("/auth/login", async (formData) => {
  const response = await axios.post(
    "http://localhost:5000/api/auth/login",
    formData,
    {
      withCredentials: true,
    }
  );

  return response.data;
});

export const checkAuth = createAsyncThunk(
  "/auth/check-auth",
  async (formData) => {
    const response = await axios.get(
      "http://localhost:5000/api/auth/check-auth",
      formData,
      {
        withCredentials: true,
        header: {
          "Cache-control":
            "no-store, no-cache, must-revalidate, proxy-revalidate",
        },
      }
    );

    return response.data;
  }
);

/*The createSlice function helps you write Redux slices more easily.
A slice represents a specific piece of the Redux store, including its state, actions, and reducers. */

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    // Defines functions (called reducers) that handle changes to this slice of the state.
    setUser: (state, action) => {}, // action is the payload dispatched by Redux actions, usually containing data for updating the state.
    extraReducer: (builder) => {
      builder
        .addCase(register.pending, (state) => {
          state.isLoading = true;
        })
        .addCase(register.fulfilled, (state, action) => {
          state.isLoading = false;
          state.isAuthenticated = true;
          state.user = null;
        })
        .addCase(register.rejected, (state) => {
          state.isLoading = false;
          state.isAuthenticated = false;
          state.user = null;
        })
        .addCase(login.pending, (state) => {
          state.isLoading = true;
        })
        .addCase(login.fulfilled, (state, action) => {
          state.isLoading = false;
          state.isAuthenticated = true;
          state.user = action?.payload.user;
        })
        .addCase(login.rejected, (state) => {
          state.isLoading = false;
          state.isAuthenticated = false;
          state.user = null;
        })
        .addCase(checkAuth.pending, (state) => {
          state.isLoading = true;
        })
        .addCase(checkAuth.fulfilled, (state, action) => {
          state.isLoading = false;
          state.isAuthenticated = true;
          state.user = action?.payload.user;
        })
        .addCase(checkAuth.rejected, (state) => {
          state.isLoading = false;
          state.isAuthenticated = false;
          state.user = null;
        });
    },
  },
});

/*Extracts and exports the action creators (setUser in this case) generated by createSlice.
 Action creators are functions that return action objects used to trigger state updates. */

export const { setUser } = authSlice.actions;
export default authSlice.reducer; // Exports the slice's reducer to be used in the Redux store.
// This reducer will be combined with other reducers (if any) to create the overall Redux store.
